# generated by fastapi-codegen:
#   filename:  spec.yaml
#   timestamp: 2025-09-18T07:03:56+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, EmailStr, Field, conint, validator


class RegisterRequest(BaseModel):
    email: EmailStr = Field(
        ..., description='Электронная почта пользователя', example='user@example.com'
    )

    @validator('email')
    def validate_email(cls, v):
        import re
        if not re.match(r".+@.+\..+", v):
            raise ValueError('Неверный формат email')
        return v
    password: str = Field(
        ...,
        min_length=6,
        description='Пароль пользователя (минимум 6 символов)',
        example='password123',
    )
    username: str = Field(
        ..., description='Отображаемое имя пользователя', example='Иван Иванов'
    )
    termsAccepted: bool = Field(
        ..., description='Флаг принятия пользовательского соглашения', example=True
    )


class LoginRequest(BaseModel):
    email: EmailStr = Field(
        ..., description='Электронная почта пользователя', example='user@example.com'
    )

    @validator('email')
    def validate_email(cls, v):
        import re
        if not re.match(r".+@.+\..+", v):
            raise ValueError('Неверный формат email')
        return v
    password: str = Field(..., min_length=6, description='Пароль пользователя', example='password123')


class UpdateProfileRequest(BaseModel):
    username: Optional[str] = Field(
        None, description='Новое отображаемое имя пользователя', example='Новое Имя'
    )


class ChangeEmailRequest(BaseModel):
    newEmail: EmailStr = Field(
        ..., description='Новый email пользователя', example='newemail@example.com'
    )

    @validator('newEmail')
    def validate_new_email(cls, v):
        import re
        if not re.match(r".+@.+\..+", v):
            raise ValueError('Неверный формат email')
        return v
    password: str = Field(
        ...,
        description='Текущий пароль пользователя для подтверждения',
        example='currentpassword123',
    )


class ChangePasswordRequest(BaseModel):
    currentPassword: str = Field(
        ..., description='Текущий пароль пользователя', example='currentpassword123'
    )
    newPassword: str = Field(
        ...,
        min_length=6,
        description='Новый пароль пользователя (минимум 6 символов)',
        example='newpassword123',
    )


class TestResultRequest(BaseModel):
    activityScore: conint(ge=1, le=7) = Field(
        ..., description='Оценка уровня активности (1-7)', example=5
    )
    moodScore: conint(ge=1, le=7) = Field(
        ..., description='Оценка настроения (1-7)', example=6
    )
    wellbeingScore: conint(ge=1, le=7) = Field(
        ..., description='Оценка общего благополучия (1-7)', example=4
    )
    timestamp: Optional[datetime] = Field(
        None, description='Временная метка теста', example='2024-01-02T10:00:00Z'
    )


class SanProcessRequest(BaseModel):
    answers: List[int] = Field(
        ..., min_items=30, max_items=30, description='Ответы на 30 вопросов (1-7)', example=[4]*30
    )


class SanProcessResponse(BaseModel):
    wellbeing: float = Field(..., description='Балл самочувствия (1-7, 1 знак)', example=5.0)
    activity: float = Field(..., description='Балл активности (1-7, 1 знак)', example=6.0)
    mood: float = Field(..., description='Балл настроения (1-7, 1 знак)', example=4.0)
    timestamp: int = Field(..., description='Временная метка (ms)', example=1726723200000)
    interpretation: Dict[str, str] = Field(..., description='Интерпретация результатов')


class ChatMessageRequest(BaseModel):
    content: str = Field(
        ..., description='Текст сообщения', example='Как улучшить свое настроение?'
    )
    isUser: bool = Field(
        ...,
        description='Флаг, указывающий, что сообщение от пользователя (true) или от AI (false)',
        example=True,
    )


class AuthResponse(BaseModel):
    userId: Optional[str] = Field(
        None, description='Уникальный идентификатор пользователя', example='user123'
    )
    email: Optional[EmailStr] = Field(
        None, description='Электронная почта пользователя', example='user@example.com'
    )
    username: Optional[str] = Field(
        None, description='Отображаемое имя пользователя', example='Иван Иванов'
    )
    accessToken: Optional[str] = Field(
        None,
        description='Access JWT токен для авторизации',
        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
    )
    refreshToken: Optional[str] = Field(
        None,
        description='Refresh токен для обновления access токена',
        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
    )


class UserProfile(BaseModel):
    userId: Optional[str] = Field(
        None, description='Уникальный идентификатор пользователя', example='user123'
    )
    email: Optional[EmailStr] = Field(
        None, description='Электронная почта пользователя', example='user@example.com'
    )
    username: Optional[str] = Field(
        None, description='Отображаемое имя пользователя', example='Иван Иванов'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='Дата и время создания учетной записи',
        example='2024-01-01T00:00:00Z',
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description='Дата и время последнего обновления профиля',
        example='2024-01-02T00:00:00Z',
    )


class TestResult(BaseModel):
    resultId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор результата теста',
        example='result123',
    )
    userId: Optional[str] = Field(
        None, description='Идентификатор пользователя', example='user123'
    )
    activityScore: Optional[int] = Field(
        None, description='Оценка уровня активности', example=5
    )
    moodScore: Optional[int] = Field(None, description='Оценка настроения', example=6)
    wellbeingScore: Optional[int] = Field(
        None, description='Оценка общего благополучия', example=4
    )
    timestamp: Optional[datetime] = Field(
        None, description='Временная метка теста', example='2024-01-02T10:00:00Z'
    )


class ChatMessage(BaseModel):
    messageId: Optional[str] = Field(
        None, description='Уникальный идентификатор сообщения', example='msg123'
    )
    userId: Optional[str] = Field(
        None, description='Идентификатор пользователя', example='user123'
    )
    content: Optional[str] = Field(
        None, description='Текст сообщения', example='Как улучшить свое настроение?'
    )
    isUser: Optional[bool] = Field(
        None,
        description='Флаг, указывающий, что сообщение от пользователя (true) или от AI (false)',
        example=True,
    )
    timestamp: Optional[datetime] = Field(
        None, description='Временная метка сообщения', example='2024-01-02T10:00:00Z'
    )


class EmotionAnalysisResponse(BaseModel):
    analysis: Optional[str] = Field(
        None,
        description='Текстовый анализ эмоционального состояния',
        example='Ваши результаты показывают улучшение настроения за последние недели...',
    )
    recommendations: Optional[List[str]] = Field(
        None,
        description='Рекомендации по улучшению эмоционального состояния',
        example=[
            'Попробуйте увеличить физическую активность',
            'Обратите внимание на качество сна',
        ],
    )
    createdAt: Optional[datetime] = Field(
        None, description='Временная метка анализа', example='2024-01-02T10:00:00Z'
    )


class SuccessResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description='Сообщение об успешной операции',
        example='Операция выполнена успешно',
    )


class Error(BaseModel):
    error: Optional[str] = Field(None, description='Описание ошибки')
    message: Optional[str] = Field(
        None, description='Детализированное сообщение об ошибке'
    )
    statusCode: Optional[int] = Field(None, description='HTTP статус код ошибки')


class SanProcessResponse(BaseModel):
    wellbeing: float = Field(..., description='Балл самочувствия (1-7, 1 знак)', example=5.0)
    activity: float = Field(..., description='Балл активности (1-7, 1 знак)', example=6.0)
    mood: float = Field(..., description='Балл настроения (1-7, 1 знак)', example=4.0)
    timestamp: int = Field(..., description='Временная метка (ms)', example=1726723200000)
    interpretation: str = Field(..., description='Полная интерпретация результатов как текст')

class RefreshRequest(BaseModel):
    refreshToken: str = Field(
        ...,
        description='Refresh токен для обновления access токена',
        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    )


class LogoutRequest(BaseModel):
    refreshToken: str = Field(
        ...,
        description='Refresh токен для инвалидации при logout',
        example='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    )
